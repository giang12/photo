// Generated by CoffeeScript 1.4.0
var Node, CircularDoublyLinkedList;

Node = (function() {

    function Node(datum, prev, next) {
        this.datum = datum;
        this.prev = prev;
        this.next = next;
    }

    return Node;

})();

CircularDoublyLinkedList = (function() {

    function CircularDoublyLinkedList(head, tail) {
        this.head = head;
        this.tail = tail;
        this.length = 0;
    }

    CircularDoublyLinkedList.prototype.compare = function(datum1, datum2) {
        return datum1 - datum2;
    };

    CircularDoublyLinkedList.prototype.insertAll = function(list) {
        var x, _i, _len;
        if (list == null) {
            list = [];
        }
        for (_i = 0, _len = list.length; _i < _len; _i++) {
            x = list[_i];
            this.insert(x);
        }
        return this.head;
    };

    CircularDoublyLinkedList.prototype.insert = function(datum) {
        var current, insertAfter, insertBefore, next, node;
        node = new Node(datum);
        insertBefore = function(a, b) {
            if (b === this.head) {
                a.prev = this.tail;
                this.head = a;
                this.tail.next = this.head;
            } else {
                a.prev = b.prev;
                b.prev.next = a;
            }
            a.next = b;
            return b.prev = a;
        };
        insertAfter = function(a, b) {
            if (b === this.tail) {
                a.next = this.head;
                this.tail = a;
                this.head.prev = this.tail;
            } else {
                a.next = b.next;
                b.next.prev = a;
            }
            a.prev = b;
            return b.next = a;
        };
        if (this.head == null) {
            this.head = node;
            this.head.next = node;
            this.head.prev = node;
            this.tail = this.head;
            this.length++;
            return node;
        }

        insertAfter(node, this.tail);


        this.tail = node;

        this.length++;
        return node;
    };

    CircularDoublyLinkedList.prototype.remove = function(datum) {
        var current;
        current = this.head;
        while (this.compare(current.datum, datum) !== 0) {
            current = current.next;
            if (current === this.head) {
                return;
            }
        }
        if (current === this.head) {
            this.head = current.next;
            this.tail.next = this.head;
            this.head.prev = this.tail;
        } else {
            current.prev.next = current.next;
        }
        if (current === this.tail) {
            this.tail = current.prev;
            this.head.prev = this.tail;
            this.length--;
            return this.tail.next = this.head;
        } else {
            this.length--;
            return current.next.prev = current.prev;
        }
    };

    CircularDoublyLinkedList.prototype.contains = function(datum) {
        return this.find(datum) != null;
    };

    CircularDoublyLinkedList.prototype.find = function(datum) {
        var current;
        if (!this.head) {
            return null;
        } else {
            current = this.head;
            while (current.next !== this.head) {
                if (this.compare(current.datum, datum) === 0) {
                    return current;
                }
                current = current.next;
            }
            return null;
        }
    };

    CircularDoublyLinkedList.prototype.print = function() {
        var current, output;
        output = "";
        if (!(this.head != null)) {
            return;
        }
        current = this.head;
        output += "" + current.datum;
        while (current.next !== this.head) {
            current = current.next;
            output += ", " + current.datum;
        }
        return output;
    };

    return CircularDoublyLinkedList;

})();